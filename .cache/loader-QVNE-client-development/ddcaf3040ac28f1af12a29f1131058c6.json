{"remainingRequest":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\source-map-loader\\index.js??ref--0!C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\src\\client\\index.js","dependencies":[{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\src\\client\\index.js","mtime":1518763481461},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\.babelrc","mtime":1518763481095},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\source-map-loader\\index.js","mtime":1508771232000}],"contextDependencies":[],"result":["import{createKernel,updateState,renderApp}from\"edge-core\";import State from\"../State\";import Application,{prepare}from\"../Application\";// eslint-disable-next-line no-console\nconsole.log(`[APP] Build: ${process.env.NODE_ENV}-${process.env.BUILD_TARGET}`);const kernel=createKernel(State);prepare(kernel).then(()=>renderApp(Application,kernel))[\"catch\"](error=>{throw new Error(`Unable to rehydrate client application: ${error}!`);});if(process.env.NODE_ENV===\"development\"&&module.hot){// Accept changes to the Edge-Core API, but don't have any actions to implement.\nmodule.hot.accept(\"edge-core\");// Any changes to our application will cause a hotload re-render.\nmodule.hot.accept(\"../Application\",()=>{const NextApplication=require(\"../Application\")[\"default\"];renderApp(NextApplication,kernel);});// Any changes to our state machinery will update the reducers.\nmodule.hot.accept(\"../State\",()=>{const NextState=require(\"../State\")[\"default\"];updateState(NextState,kernel);});}",{"version":3,"sources":["src\\client\\index.js"],"names":["createKernel","updateState","renderApp","State","Application","prepare","console","log","process","env","NODE_ENV","BUILD_TARGET","kernel","then","error","Error","module","hot","accept","NextApplication","require","NextState"],"mappings":"AAAA,OAASA,YAAT,CAAuBC,WAAvB,CAAoCC,SAApC,KAAqD,WAArD,CAEA,MAAOC,MAAP,gBACA,MAAOC,YAAP,EAAsBC,OAAtB,sBAEA;AACAC,QAAQC,GAAR,CAAa,gBAAeC,QAAQC,GAAR,CAAYC,QAAS,IAAGF,QAAQC,GAAR,CAAYE,YAAa,EAA7E,EAEA,KAAMC,QAASZ,aAAaG,KAAb,CAAf,CACAE,QAAQO,MAAR,EACGC,IADH,CACQ,IAAMX,UAAUE,WAAV,CAAuBQ,MAAvB,CADd,WAESE,OAAS,CACd,KAAM,IAAIC,MAAJ,CAAW,2CAA0CD,KAAM,GAA3D,CAAN,CACD,CAJH,EAMA,GAAIN,QAAQC,GAAR,CAAYC,QAAZ,GAAyB,aAAzB,EAA0CM,OAAOC,GAArD,CAA0D,CACxD;AACAD,OAAOC,GAAP,CAAWC,MAAX,CAAkB,WAAlB,EAEA;AACAF,OAAOC,GAAP,CAAWC,MAAX,CAAkB,gBAAlB,CAAoC,IAAM,CACxC,KAAMC,iBAAkBC,oCAAxB,CACAlB,UAAUiB,eAAV,CAA2BP,MAA3B,EACD,CAHD,EAKA;AACAI,OAAOC,GAAP,CAAWC,MAAX,CAAkB,UAAlB,CAA8B,IAAM,CAClC,KAAMG,WAAYD,8BAAlB,CACAnB,YAAYoB,SAAZ,CAAuBT,MAAvB,EACD,CAHD,EAID","file":"index.js","sourceRoot":"C:/Users/werle/Documents/projects/deuba/vision2018/edge-graphql","sourcesContent":["import { createKernel, updateState, renderApp } from \"edge-core\"\n\nimport State from \"../State\"\nimport Application, { prepare } from \"../Application\"\n\n// eslint-disable-next-line no-console\nconsole.log(`[APP] Build: ${process.env.NODE_ENV}-${process.env.BUILD_TARGET}`)\n\nconst kernel = createKernel(State)\nprepare(kernel)\n  .then(() => renderApp(Application, kernel))\n  .catch(error => {\n    throw new Error(`Unable to rehydrate client application: ${error}!`)\n  })\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  // Accept changes to the Edge-Core API, but don't have any actions to implement.\n  module.hot.accept(\"edge-core\")\n\n  // Any changes to our application will cause a hotload re-render.\n  module.hot.accept(\"../Application\", () => {\n    const NextApplication = require(\"../Application\").default\n    renderApp(NextApplication, kernel)\n  })\n\n  // Any changes to our state machinery will update the reducers.\n  module.hot.accept(\"../State\", () => {\n    const NextState = require(\"../State\").default\n    updateState(NextState, kernel)\n  })\n}\n"]}]}