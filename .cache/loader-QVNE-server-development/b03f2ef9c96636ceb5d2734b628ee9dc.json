{"remainingRequest":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\source-map-loader\\index.js??ref--0!C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\src\\server\\index.js","dependencies":[{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\src\\server\\index.js","mtime":1518763482367},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\.babelrc","mtime":1518763481095},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\source-map-loader\\index.js","mtime":1508771232000}],"contextDependencies":[],"result":["\"use strict\";exports.__esModule=true;var _path2=require(\"path\");var _path3=_interopRequireDefault(_path2);var _importCss2=require(\"babel-plugin-universal-import/importCss\");var _importCss3=_interopRequireDefault(_importCss2);var _universalImport2=require(\"babel-plugin-universal-import/universalImport\");var _universalImport3=_interopRequireDefault(_universalImport2);var _jsxFileName=\"C:\\\\Users\\\\werle\\\\Documents\\\\projects\\\\deuba\\\\vision2018\\\\edge-graphql\\\\src\\\\server\\\\index.js\";var _react=require(\"react\");var _react2=_interopRequireDefault(_react);var _dotenv=require(\"dotenv\");var _dotenv2=_interopRequireDefault(_dotenv);var _edgeCore=require(\"edge-core\");var _Application=require(\"../Application\");var _Application2=_interopRequireDefault(_Application);var _State=require(\"../State\");var _State2=_interopRequireDefault(_State);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}_dotenv2[\"default\"].config();// eslint-disable-next-line no-console\nconsole.log(`[APP] Build: ${process.env.NODE_ENV}-${process.env.BUILD_TARGET}`);/* eslint-disable no-console, max-statements */exports[\"default\"]=({clientStats})=>async(request,response)=>{// [1] Response Preparation:\n// This step parses some client information like language and user agent.\nconst edge=(0,_edgeCore.prepareResponse)(request);// [2] Prepare Localization Support:\n// Make sure that all required internationalization data and polyfills are ready.\n// On the server-side we estimate client-side support by querying the caniuse\n// database using the user agent passed via HTTP headers.\nconst intl=edge.intl;(0,_edgeCore.ensureIntlSupport)((0,_universalImport3[\"default\"])({id:\"lean-intl/locale-data/\",file:\"C:/Users/werle/Documents/projects/deuba/vision2018/edge-graphql/src/server/index.js\",load:()=>Promise.all([import(/* webpackChunkName: 'lean-intl/locale-data/[request]' */`lean-intl/locale-data/${intl.locale}`),(0,_importCss3[\"default\"])(`lean-intl/locale-data/${intl.locale}`,{})]).then(proms=>proms[0]),path:()=>_path3[\"default\"].join(__dirname,`lean-intl/locale-data/${intl.locale}`),resolve:()=>require.resolveWeak(`lean-intl/locale-data/${intl.locale}`),chunkName:()=>`lean-intl/locale-data/${intl.locale}`}),intl,edge.browser);(0,_edgeCore.ensureReactIntlSupport)((0,_universalImport3[\"default\"])({id:\"react-intl/locale-data/\",file:\"C:/Users/werle/Documents/projects/deuba/vision2018/edge-graphql/src/server/index.js\",load:()=>Promise.all([import(/* webpackChunkName: 'react-intl/locale-data/[request]' */`react-intl/locale-data/${intl.language}`),(0,_importCss3[\"default\"])(`react-intl/locale-data/${intl.language}`,{})]).then(proms=>proms[0]),path:()=>_path3[\"default\"].join(__dirname,`react-intl/locale-data/${intl.language}`),resolve:()=>require.resolveWeak(`react-intl/locale-data/${intl.language}`),chunkName:()=>`react-intl/locale-data/${intl.language}`}),intl);// [3] Build State:\n// Built up object which contains all relevant initial render data.\n//\n// We can use this for passing environment settings to the client.\n// This is actually super smart and helpful for things like API urls\n// which might change depending on environment.\n//\n// Make sure to have the matching reducer for each top-level entry.\n// This is required to make Redux work correctly.\nconst state={env:{API_URL:process.env.API_URL,APOLLO_URL:process.env.APOLLO_URL}// [4] Create Kernel Instance:\n// This one holds all current request state in an easy-accessible container.\n};const kernel=(0,_edgeCore.createKernel)(_State2[\"default\"],{state,edge,request});// [5] Wrap Application:\n// We wrap the original application with support for Intl, Redux, ...\nconst WrappedApplication=(0,_edgeCore.wrapApplication)(_react2[\"default\"].createElement(_Application2[\"default\"],{__source:{fileName:_jsxFileName,lineNumber:65},__self:undefined}),kernel);// [6] Fetch Data:\n// Now we are ready to fetch required data by waiting for async requests.\nawait(0,_edgeCore.fetchData)(WrappedApplication,kernel);// [7] Render Application:\n// When all required data is available we can safely render the result.\n(0,_edgeCore.renderApplication)({Application:WrappedApplication,clientStats,kernel,request,response});};",{"version":3,"sources":["src\\server\\index.js"],"names":["config","console","log","process","env","NODE_ENV","BUILD_TARGET","clientStats","request","response","edge","intl","locale","browser","language","state","API_URL","APOLLO_URL","kernel","WrappedApplication","Application"],"mappings":"ieAAA,4B,2CACA,8B,6CAEA,mCAUA,2C,uDACA,+B,gIAEA,oBAAOA,MAAP,GAEA;AACAC,QAAQC,GAAR,CAAa,gBAAeC,QAAQC,GAAR,CAAYC,QAAS,IAAGF,QAAQC,GAAR,CAAYE,YAAa,EAA7E,EAEA,+C,mBACe,CAAC,CAAEC,WAAF,CAAD,GAAqB,MAAOC,OAAP,CAAgBC,QAAhB,GAA6B,CAC/D;AACA;AACA,KAAMC,MAAO,8BAAgBF,OAAhB,CAAb,CAEA;AACA;AACA;AACA;AACA,KAAMG,MAAOD,KAAKC,IAAlB,CACA,+MACE,gEAAQ,yBAAwBA,KAAKC,MAAO,EAA5C,CADF,4BACU,yBAAwBD,KAAKC,MAAO,EAD9C,uEACU,yBAAwBD,KAAKC,MAAO,EAD9C,kCACU,yBAAwBD,KAAKC,MAAO,EAD9C,gBACU,yBAAwBD,KAAKC,MAAO,EAD9C,GAEED,IAFF,CAGED,KAAKG,OAHP,EAKA,qNACE,iEAAQ,0BAAyBF,KAAKG,QAAS,EAA/C,CADF,4BACU,0BAAyBH,KAAKG,QAAS,EADjD,uEACU,0BAAyBH,KAAKG,QAAS,EADjD,kCACU,0BAAyBH,KAAKG,QAAS,EADjD,gBACU,0BAAyBH,KAAKG,QAAS,EADjD,GAEEH,IAFF,EAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAMI,OAAQ,CACZX,IAAK,CACHY,QAASb,QAAQC,GAAR,CAAYY,OADlB,CAEHC,WAAYd,QAAQC,GAAR,CAAYa,UAFrB,CAMP;AACA;AARc,CAAd,CASA,KAAMC,QAAS,8CAAoB,CAAEH,KAAF,CAASL,IAAT,CAAeF,OAAf,CAApB,CAAf,CAEA;AACA;AACA,KAAMW,oBAAqB,8BAAgB,4HAAhB,CAAiCD,MAAjC,CAA3B,CAEA;AACA;AACA,KAAM,wBAAUC,kBAAV,CAA8BD,MAA9B,CAAN,CAEA;AACA;AACA,gCAAkB,CAChBE,YAAaD,kBADG,CAEhBZ,WAFgB,CAGhBW,MAHgB,CAIhBV,OAJgB,CAKhBC,QALgB,CAAlB,EAOD,C","file":"index.js","sourceRoot":"C:/Users/werle/Documents/projects/deuba/vision2018/edge-graphql","sourcesContent":["import React from \"react\"\nimport dotenv from \"dotenv\"\n\nimport {\n  prepareResponse,\n  ensureIntlSupport,\n  ensureReactIntlSupport,\n  wrapApplication,\n  renderApplication,\n  createKernel,\n  fetchData\n} from \"edge-core\"\n\nimport Application from \"../Application\"\nimport State from \"../State\"\n\ndotenv.config()\n\n// eslint-disable-next-line no-console\nconsole.log(`[APP] Build: ${process.env.NODE_ENV}-${process.env.BUILD_TARGET}`)\n\n/* eslint-disable no-console, max-statements */\nexport default ({ clientStats }) => async (request, response) => {\n  // [1] Response Preparation:\n  // This step parses some client information like language and user agent.\n  const edge = prepareResponse(request)\n\n  // [2] Prepare Localization Support:\n  // Make sure that all required internationalization data and polyfills are ready.\n  // On the server-side we estimate client-side support by querying the caniuse\n  // database using the user agent passed via HTTP headers.\n  const intl = edge.intl\n  ensureIntlSupport(\n    import(`lean-intl/locale-data/${intl.locale}`),\n    intl,\n    edge.browser\n  )\n  ensureReactIntlSupport(\n    import(`react-intl/locale-data/${intl.language}`),\n    intl\n  )\n\n  // [3] Build State:\n  // Built up object which contains all relevant initial render data.\n  //\n  // We can use this for passing environment settings to the client.\n  // This is actually super smart and helpful for things like API urls\n  // which might change depending on environment.\n  //\n  // Make sure to have the matching reducer for each top-level entry.\n  // This is required to make Redux work correctly.\n  const state = {\n    env: {\n      API_URL: process.env.API_URL,\n      APOLLO_URL: process.env.APOLLO_URL\n    }\n  }\n\n  // [4] Create Kernel Instance:\n  // This one holds all current request state in an easy-accessible container.\n  const kernel = createKernel(State, { state, edge, request })\n\n  // [5] Wrap Application:\n  // We wrap the original application with support for Intl, Redux, ...\n  const WrappedApplication = wrapApplication(<Application />, kernel)\n\n  // [6] Fetch Data:\n  // Now we are ready to fetch required data by waiting for async requests.\n  await fetchData(WrappedApplication, kernel)\n\n  // [7] Render Application:\n  // When all required data is available we can safely render the result.\n  renderApplication({\n    Application: WrappedApplication,\n    clientStats,\n    kernel,\n    request,\n    response\n  })\n}\n"]}]}