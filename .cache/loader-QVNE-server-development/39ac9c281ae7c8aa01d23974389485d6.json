{"remainingRequest":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\source-map-loader\\index.js??ref--0!C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\src\\modules\\Counter.js","dependencies":[{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\src\\modules\\Counter.js","mtime":1518763482323},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\.babelrc","mtime":1518763481095},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000},{"path":"C:\\Users\\werle\\Documents\\projects\\deuba\\vision2018\\edge-graphql\\node_modules\\source-map-loader\\index.js","mtime":1508771232000}],"contextDependencies":[],"result":["\"use strict\";exports.__esModule=true;exports.getCounter=getCounter;exports.setCounter=setCounter;exports.incrementCounter=incrementCounter;exports.decrementCounter=decrementCounter;exports.loadCounter=loadCounter;exports.counterReducer=counterReducer;const SET_COUNTER=exports.SET_COUNTER=\"counter/SET\";const INCREMENT_COUNTER=exports.INCREMENT_COUNTER=\"counter/INCREMENT\";const DECREMENT_COUNTER=exports.DECREMENT_COUNTER=\"counter/DECREMENT\";/**\n * Selector for accessing the counter value from inside the global state.\n *\n * @param {state} state Global Redux state.\n */function getCounter(state){return state.counter.value;}/**\n * Action creator for setting the counter value.\n *\n * @param {number} value New value to set for the counter.\n */function setCounter(value){return{type:SET_COUNTER,value};}/**\n * Action creator for incrementing the counter value.\n */function incrementCounter(){return{type:INCREMENT_COUNTER};}/**\n * Action creator for decrementing the counter value.\n */function decrementCounter(){return{type:DECREMENT_COUNTER};}/**\n * This somewhat tries to emulate a asyncronous backend request.\n */function mockServerDelay(){/* eslint-disable no-console */console.log(\"Loading counter...\");return new Promise(resolve=>{setTimeout(()=>{let value=Math.round(Math.random()*100);console.log(\"Received counter:\",value);resolve(value);},100);});}/**\n * Async data loading using redux-thunk.\n */function loadCounter(){return dispatch=>mockServerDelay().then(value=>dispatch(setCounter(value)));}const initialState={value:null/**\n * Reducer for all counter relevant action types.\n *\n * @param previousState Previous state object of this reducer.\n * @param {string} action Action to process.\n */};function counterReducer(previousState=initialState,action){switch(action.type){case SET_COUNTER:return Object.assign({},previousState,{value:action.value});case INCREMENT_COUNTER:return Object.assign({},previousState,{value:previousState.value+1});case DECREMENT_COUNTER:return Object.assign({},previousState,{value:previousState.value-1});default:return previousState;}}",{"version":3,"sources":["src\\modules\\Counter.js"],"names":["getCounter","setCounter","incrementCounter","decrementCounter","loadCounter","counterReducer","SET_COUNTER","INCREMENT_COUNTER","DECREMENT_COUNTER","state","counter","value","type","mockServerDelay","console","log","Promise","resolve","setTimeout","Math","round","random","dispatch","then","initialState","previousState","action"],"mappings":"6CASgBA,U,CAAAA,U,SASAC,U,CAAAA,U,SAOAC,gB,CAAAA,gB,SAOAC,gB,CAAAA,gB,SAsBAC,W,CAAAA,W,SAaAC,c,CAAAA,c,CAnET,KAAMC,iCAAc,aAApB,CACA,KAAMC,6CAAoB,mBAA1B,CACA,KAAMC,6CAAoB,mBAA1B,CAEP;;;;GAKO,QAASR,WAAT,CAAoBS,KAApB,CAA2B,CAChC,MAAOA,OAAMC,OAAN,CAAcC,KAArB,CACD,CAED;;;;GAKO,QAASV,WAAT,CAAoBU,KAApB,CAA2B,CAChC,MAAO,CAAEC,KAAMN,WAAR,CAAqBK,KAArB,CAAP,CACD,CAED;;GAGO,QAAST,iBAAT,EAA4B,CACjC,MAAO,CAAEU,KAAML,iBAAR,CAAP,CACD,CAED;;GAGO,QAASJ,iBAAT,EAA4B,CACjC,MAAO,CAAES,KAAMJ,iBAAR,CAAP,CACD,CAED;;GAGA,QAASK,gBAAT,EAA2B,CACzB,+BACAC,QAAQC,GAAR,CAAY,oBAAZ,EACA,MAAO,IAAIC,QAAJ,CAAaC,OAAD,EAAqB,CACtCC,WAAW,IAAM,CACf,GAAIP,OAAQQ,KAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,GAA3B,CAAZ,CACAP,QAAQC,GAAR,CAAY,mBAAZ,CAAiCJ,KAAjC,EACAM,QAAQN,KAAR,EACD,CAJD,CAIG,GAJH,EAKD,CANM,CAAP,CAOD,CAED;;GAGO,QAASP,YAAT,EAAuB,CAC5B,MAAQkB,SAAD,EACLT,kBAAkBU,IAAlB,CAAwBZ,KAAD,EAAWW,SAASrB,WAAWU,KAAX,CAAT,CAAlC,CADF,CAED,CAED,KAAMa,cAAe,CAAEb,MAAO,IAE9B;;;;;GAFqB,CAArB,CAQO,QAASN,eAAT,CAAwBoB,cAAgBD,YAAxC,CAAsDE,MAAtD,CAA8D,CACnE,OAAQA,OAAOd,IAAf,EACE,IAAKN,YAAL,CACE,wBAAYmB,aAAZ,EAA2Bd,MAAOe,OAAOf,KAAzC,GAEF,IAAKJ,kBAAL,CACE,wBAAYkB,aAAZ,EAA2Bd,MAAOc,cAAcd,KAAd,CAAsB,CAAxD,GAEF,IAAKH,kBAAL,CACE,wBAAYiB,aAAZ,EAA2Bd,MAAOc,cAAcd,KAAd,CAAsB,CAAxD,GAEF,QACE,MAAOc,cAAP,CAXJ,CAaD","file":"Counter.js","sourceRoot":"C:/Users/werle/Documents/projects/deuba/vision2018/edge-graphql","sourcesContent":["export const SET_COUNTER = \"counter/SET\"\nexport const INCREMENT_COUNTER = \"counter/INCREMENT\"\nexport const DECREMENT_COUNTER = \"counter/DECREMENT\"\n\n/**\n * Selector for accessing the counter value from inside the global state.\n *\n * @param {state} state Global Redux state.\n */\nexport function getCounter(state) {\n  return state.counter.value\n}\n\n/**\n * Action creator for setting the counter value.\n *\n * @param {number} value New value to set for the counter.\n */\nexport function setCounter(value) {\n  return { type: SET_COUNTER, value }\n}\n\n/**\n * Action creator for incrementing the counter value.\n */\nexport function incrementCounter() {\n  return { type: INCREMENT_COUNTER }\n}\n\n/**\n * Action creator for decrementing the counter value.\n */\nexport function decrementCounter() {\n  return { type: DECREMENT_COUNTER }\n}\n\n/**\n * This somewhat tries to emulate a asyncronous backend request.\n */\nfunction mockServerDelay() {\n  /* eslint-disable no-console */\n  console.log(\"Loading counter...\")\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let value = Math.round(Math.random() * 100)\n      console.log(\"Received counter:\", value)\n      resolve(value)\n    }, 100)\n  })\n}\n\n/**\n * Async data loading using redux-thunk.\n */\nexport function loadCounter() {\n  return (dispatch) =>\n    mockServerDelay().then((value) => dispatch(setCounter(value)))\n}\n\nconst initialState = { value: null }\n\n/**\n * Reducer for all counter relevant action types.\n *\n * @param previousState Previous state object of this reducer.\n * @param {string} action Action to process.\n */\nexport function counterReducer(previousState = initialState, action) {\n  switch (action.type) {\n    case SET_COUNTER:\n      return { ...previousState, value: action.value }\n\n    case INCREMENT_COUNTER:\n      return { ...previousState, value: previousState.value + 1 }\n\n    case DECREMENT_COUNTER:\n      return { ...previousState, value: previousState.value - 1 }\n\n    default:\n      return previousState\n  }\n}\n"]}]}